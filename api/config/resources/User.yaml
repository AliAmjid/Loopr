App\Entity\User:
    attributes:
        normalization_context:
            groups: [ exposed, read ]
        denormalization_context:
            groups: [ user:write ]

    collectionOperations: { }
    itemOperations:
        get:
            method: GET
            controller: ApiPlatform\Core\Action\NotFoundAction
            read: false
            output: false
    graphql:
        me:
            security_message: "r: USER_LOGGED"
            security: "is_granted('USER_LOGGED')"
            item_query: App\Controller\GetMeController
            args: [ ]
        item_query:
            security_message: "r: USER_SHOW"
            security: "is_granted('USER_SHOW_ALL')"
        collection_query:
            security: "is_granted('USER_SHOW_ALL')"
        create:
            security: "is_granted('USER_CREATE')"
            security_message: "r: USER_CREATE"
            denormalization_context:
                groups: [ user:password, user:write ]
        changePassword:
            security: "is_granted('USER_LOGGED')"
            security_message: "r USER_LOGGED"
            mutation: App\Controller\ChangeUserPasswordController
            args:
                oldPassword:
                    type: String!
                newPassword:
                    type: String!

        update:
            security: "is_granted('USER_EDIT')"
            security_message: "r: USER_EDIT"
