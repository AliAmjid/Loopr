type Query {
    node(id: ID!): Node
    group(id: ID!): Group
    groups(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [GroupFilter_exists]
        createdAt: [GroupFilter_createdAt]
        archivedAt: [GroupFilter_archivedAt]
        id: String
        id_list: [String]
        section: String
    ): GroupConnection
    percentToMarkConvert(id: ID!): PercentToMarkConvert
    aclRoles: [AclRole]
    aclRole(id: ID!): AclRole
    classGroups(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        order: [ClassGroupFilter_order]
        exists: [ClassGroupFilter_exists]
        createdAt: [ClassGroupFilter_createdAt]
        archivedAt: [ClassGroupFilter_archivedAt]
    ): ClassGroupConnection
    classGroup(id: ID!): ClassGroup
    aclResources: [AclResource]
    subjectType(id: ID!): SubjectType
    subjectTypes(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
    ): SubjectTypeConnection
    exam(id: ID!): Exam
    writtenExams(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        schoolPeriod_id: String
        schoolPeriod_id_list: [String]
        schoolPeriod_schoolYear: Int
        schoolPeriod_schoolYear_list: [Int]
        order: [ExamFilter_order]
    ): ExamConnection
    meUser: User
    user(id: ID!): User
    users(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [UserFilter_exists]
        createdAt: [UserFilter_createdAt]
        archivedAt: [UserFilter_archivedAt]
        id: String
        id_list: [String]
        firstname: String
        lastname: String
        role_resources_name: String
        role_resources_name_list: [String]
        role_resources_id: String
        role_resources_id_list: [String]
        classGroup_id: String
        classGroup_id_list: [String]
        role_id: String
        role_id_list: [String]
        role_name: String
        role_name_list: [String]
        email: String
        order: [UserFilter_order]
    ): UserConnection
    userPrivateData(id: ID!): UserPrivateData
    subject(id: ID!): Subject
    subjects(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [SubjectFilter_exists]
        archivedAt: [SubjectFilter_archivedAt]
        hasUserExamInSchoolPeriod: Iterable
    ): SubjectConnection
    learnedSubjects(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [SubjectFilter_exists]
        archivedAt: [SubjectFilter_archivedAt]
        hasUserExamInSchoolPeriod: Iterable
    ): SubjectConnection
    getToken(email: String!, password: String!): Token
    notification(id: ID!): Notification
    getCurrentSchoolPeriod: SchoolPeriod
    schoolPeriods(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        id: String
        id_list: [String]
        schoolYear: Int
        schoolYear_list: [Int]
        quarter: Int
        quarter_list: [Int]
        order: [SchoolPeriodFilter_order]
    ): SchoolPeriodConnection
    getCurrentHalfYearSchoolPeriods(
        id: String
        id_list: [String]
        schoolYear: Int
        schoolYear_list: [Int]
        quarter: Int
        quarter_list: [Int]
        order: [SchoolPeriodFilter_order]
    ): [SchoolPeriod]

    #
    #
    ping: Boolean!

    #
    #
    me: SymfonyUserInterface
}

# A node, according to the Relay specification.
interface Node {
    # The id of this node.
    id: ID!
}

#
type Group implements Node {
    id: ID!
    subjects(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [SubjectFilter_exists]
        archivedAt: [SubjectFilter_archivedAt]
        hasUserExamInSchoolPeriod: Iterable
    ): SubjectConnection
    section: String!
    users(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [UserFilter_exists]
        createdAt: [UserFilter_createdAt]
        archivedAt: [UserFilter_archivedAt]
        id: String
        id_list: [String]
        firstname: String
        lastname: String
        role_resources_name: String
        role_resources_name_list: [String]
        role_resources_id: String
        role_resources_id_list: [String]
        classGroup_id: String
        classGroup_id_list: [String]
        role_id: String
        role_id_list: [String]
        role_name: String
        role_name_list: [String]
        email: String
        order: [UserFilter_order]
    ): UserConnection
    createdBy: User
    createdAt: String!
    archivedAt: String
    classParents: Iterable!
    _id: String!
}

input SubjectFilter_exists {
    archivedAt: Boolean
}

input SubjectFilter_archivedAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

# The `Iterable` scalar type represents an array or a Traversable with any kind of data.
scalar Iterable

# Connection for Subject.
type SubjectConnection {
    edges: [SubjectEdge]
    pageInfo: SubjectPageInfo!
    totalCount: Int!
}

# Edge of Subject.
type SubjectEdge {
    node: Subject
    cursor: String!
}

#
type Subject implements Node {
    id: ID!
    subjectType: SubjectType
    group: Group
    classGroup: ClassGroup
    teacher: User!
    teacherCardColor: String
    evaluationSystem: String!
    pointSystemAverages: Float!
    anonymizedPointSystemResults: Iterable!
    exams(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        schoolPeriod_id: String
        schoolPeriod_id_list: [String]
        schoolPeriod_schoolYear: Int
        schoolPeriod_schoolYear_list: [Int]
        order: [ExamFilter_order]
    ): ExamConnection
    percentsToMarkConvert: PercentToMarkConvert!
    archivedAt: String
    _id: String!
}

#
type SubjectType implements Node {
    id: ID!
    name: String!
    subjects(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [SubjectFilter_exists]
        archivedAt: [SubjectFilter_archivedAt]
        hasUserExamInSchoolPeriod: Iterable
    ): SubjectConnection
    _id: String!
}

#
type ClassGroup implements Node {
    id: ID!
    subjects(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [SubjectFilter_exists]
        archivedAt: [SubjectFilter_archivedAt]
        hasUserExamInSchoolPeriod: Iterable
    ): SubjectConnection
    year: Int!
    section: String!
    users(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [UserFilter_exists]
        createdAt: [UserFilter_createdAt]
        archivedAt: [UserFilter_archivedAt]
        id: String
        id_list: [String]
        firstname: String
        lastname: String
        role_resources_name: String
        role_resources_name_list: [String]
        role_resources_id: String
        role_resources_id_list: [String]
        classGroup_id: String
        classGroup_id_list: [String]
        role_id: String
        role_id_list: [String]
        role_name: String
        role_name_list: [String]
        email: String
        order: [UserFilter_order]
    ): UserConnection

    # Teacher needs to be user with resource GROUP_TEACHER
    teacher: User
    createdAt: String!
    archivedAt: String
    _id: String!
}

input UserFilter_exists {
    classGroup: Boolean
    archivedAt: Boolean
}

input UserFilter_createdAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

input UserFilter_archivedAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

input UserFilter_order {
    email: String
    lastname: String
}

# Connection for User.
type UserConnection {
    edges: [UserEdge]
    pageInfo: UserPageInfo!
    totalCount: Int!
}

# Edge of User.
type UserEdge {
    node: User
    cursor: String!
}

#
type User implements Node {
    id: ID!
    _id: String!
    groups(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [GroupFilter_exists]
        createdAt: [GroupFilter_createdAt]
        archivedAt: [GroupFilter_archivedAt]
        id: String
        id_list: [String]
        section: String
    ): GroupConnection

    # email of user
    email: String!
    role: AclRole!
    lastname: String!
    firstname: String!
    createdAt: String!
    classGroup: ClassGroup
    privateData: UserPrivateData!
    notifications(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [NotificationFilter_exists]
        order: [NotificationFilter_order]
    ): NotificationConnection
    taughtSubjects(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [SubjectFilter_exists]
        archivedAt: [SubjectFilter_archivedAt]
        hasUserExamInSchoolPeriod: Iterable
    ): SubjectConnection
    archivedAt: String
    notificationViewAtNullCount: Int!
}

input GroupFilter_exists {
    archivedAt: Boolean
}

input GroupFilter_createdAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

input GroupFilter_archivedAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

# Connection for Group.
type GroupConnection {
    edges: [GroupEdge]
    pageInfo: GroupPageInfo!
    totalCount: Int!
}

# Edge of Group.
type GroupEdge {
    node: Group
    cursor: String!
}

# Information about the current page.
type GroupPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

#
type AclRole implements Node {
    id: ID!

    # Example format: ROLE_ADMIN.
    # Must start with 'ROLE_' and name cant be longer than 20 letters.
    # (regex: ^ROLE_[A-Z]{1,20}$/m)
    name: String!

    # Must be an array IRIs (acl_resources/<uuid>) of existing resources
    resources: [AclResource]
    _id: String!
}

#
type AclResource implements Node {
    id: ID!
    name: String!
    dependsOn: [AclResource]
}

#
type UserPrivateData implements Node {
    id: ID!
    tourHomepage: Boolean!
    tourClassGroup: Boolean!
    tourGroup: Boolean!
    tourCreateUsers: Boolean!
    darkMode: Boolean!
    newMarkNotificationEmail: Boolean!
    defaultPercentToMark: PercentToMarkConvert!
    _id: String!
}

#
type PercentToMarkConvert implements Node {
    id: ID!
    one: Int!
    two: Int!
    three: Int!
    four: Int!
    _id: String!
}

input NotificationFilter_exists {
    viewAt: Boolean
}

input NotificationFilter_order {
    createdAt: String
}

# Connection for Notification.
type NotificationConnection {
    edges: [NotificationEdge]
    pageInfo: NotificationPageInfo!
    totalCount: Int!
}

# Edge of Notification.
type NotificationEdge {
    node: Notification
    cursor: String!
}

#
type Notification implements Node {
    id: ID!
    type: String!
    parameters: Iterable!
    user: User!
    createdAt: String!
    viewAt: String
    email: Boolean!
    _id: String!
}

# Information about the current page.
type NotificationPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

# Information about the current page.
type UserPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

input ExamFilter_order {
    writtenAt: String
    createdAt: String
}

# Connection for Exam.
type ExamConnection {
    edges: [ExamEdge]
    pageInfo: ExamPageInfo!
    totalCount: Int!
}

# Edge of Exam.
type ExamEdge {
    node: Exam
    cursor: String!
}

#
type Exam implements Node {
    id: ID!
    name: String!
    createdAt: String!
    schoolPeriod: SchoolPeriod
    subject: Subject
    pointSystem: PointSystem
    writtenAt: String!
    _id: String!
}

#
type SchoolPeriod implements Node {
    id: ID!

    # quarter of year from 1 to 4
    quarter: Int!

    # from when quarter is started
    from: String!

    # when quarter ends
    to: String!

    # 1st year of school (ex. 2020/21 so school year will be 2020)
    schoolYear: Int!
    _id: String!
}

#
type PointSystem implements Node {
    id: ID!
    maxPoints: Int!
    points(
        # Returns the first n elements from the list.
        first: Int

        # Returns the last n elements from the list.
        last: Int

        # Returns the elements in the list that come before the specified cursor.
        before: String

        # Returns the elements in the list that come after the specified cursor.
        after: String
        exists: [PointFilter_exists]
    ): PointConnection
    exam: Exam!
    anonymizedResults: Iterable!
    average: Float!
    _id: String!
}

input PointFilter_exists {
    user_archivedAt: Boolean
}

# Connection for Point.
type PointConnection {
    edges: [PointEdge]
    pageInfo: PointPageInfo!
    totalCount: Int!
}

# Edge of Point.
type PointEdge {
    node: Point
    cursor: String!
}

#
type Point implements Node {
    id: ID!
    user: User!
    pointSystem: PointSystem!
    points: Int!
    examWritten: Boolean!
    betterThan: Int!
    worstThan: Int!
    percentil: Float!
    convertedToMark: Int!
    _id: String!
}

# Information about the current page.
type PointPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

# Information about the current page.
type ExamPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

# Information about the current page.
type SubjectPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

input ClassGroupFilter_order {
    year: String
    section: String
}

input ClassGroupFilter_exists {
    archivedAt: Boolean
}

input ClassGroupFilter_createdAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

input ClassGroupFilter_archivedAt {
    before: String
    strictly_before: String
    after: String
    strictly_after: String
}

# Connection for ClassGroup.
type ClassGroupConnection {
    edges: [ClassGroupEdge]
    pageInfo: ClassGroupPageInfo!
    totalCount: Int!
}

# Edge of ClassGroup.
type ClassGroupEdge {
    node: ClassGroup
    cursor: String!
}

# Information about the current page.
type ClassGroupPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

# Connection for SubjectType.
type SubjectTypeConnection {
    edges: [SubjectTypeEdge]
    pageInfo: SubjectTypePageInfo!
    totalCount: Int!
}

# Edge of SubjectType.
type SubjectTypeEdge {
    node: SubjectType
    cursor: String!
}

# Information about the current page.
type SubjectTypePageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type Token implements Node {
    id: ID!

    # Use token in header like this: 'Authorization: Bearer {token}'
    token: String!
    user: User!
}

input SchoolPeriodFilter_order {
    schoolYear: String
    quarter: String
}

# Connection for SchoolPeriod.
type SchoolPeriodConnection {
    edges: [SchoolPeriodEdge]
    pageInfo: SchoolPeriodPageInfo!
    totalCount: Int!
}

# Edge of SchoolPeriod.
type SchoolPeriodEdge {
    node: SchoolPeriod
    cursor: String!
}

# Information about the current page.
type SchoolPeriodPageInfo {
    endCursor: String
    startCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

interface SymfonyUserInterface {
    #
    #
    roles: [String!]!

    # Returns the username used to authenticate the user.
    userName: String!
}

type Mutation {
    #
    #
    applyPasswordResetUser(email: String!): Boolean!

    #
    #
    resetPasswordUser(key: String!, newPassword: String!): Boolean!

    # Creates a Group.
    createGroup(input: createGroupInput!): createGroupPayload

    # Updates a Group.
    updateGroup(input: updateGroupInput!): updateGroupPayload

    # Deletes a Group.
    deleteGroup(input: deleteGroupInput!): deleteGroupPayload

    # UpdateUserss a Group.
    updateUsersGroup(input: updateUsersGroupInput!): updateUsersGroupPayload

    # Archives a Group.
    archiveGroup(input: archiveGroupInput!): archiveGroupPayload

    # Updates a PercentToMarkConvert.
    updatePercentToMarkConvert(
        input: updatePercentToMarkConvertInput!
    ): updatePercentToMarkConvertPayload

    # Updates a AclRole.
    updateAclRole(input: updateAclRoleInput!): updateAclRolePayload

    # Creates a AclRole.
    createAclRole(input: createAclRoleInput!): createAclRolePayload

    # Deletes a AclRole.
    deleteAclRole(input: deleteAclRoleInput!): deleteAclRolePayload

    # Creates a ClassGroup.
    createClassGroup(input: createClassGroupInput!): createClassGroupPayload

    # Updates a ClassGroup.
    updateClassGroup(input: updateClassGroupInput!): updateClassGroupPayload

    # UpdateUserss a ClassGroup.
    updateUsersClassGroup(
        input: updateUsersClassGroupInput!
    ): updateUsersClassGroupPayload

    # Deletes a ClassGroup.
    deleteClassGroup(input: deleteClassGroupInput!): deleteClassGroupPayload

    # Archives a ClassGroup.
    archiveClassGroup(input: archiveClassGroupInput!): archiveClassGroupPayload

    # Creates a SubjectType.
    createSubjectType(input: createSubjectTypeInput!): createSubjectTypePayload

    # Updates a SubjectType.
    updateSubjectType(input: updateSubjectTypeInput!): updateSubjectTypePayload

    # Deletes a SubjectType.
    deleteSubjectType(input: deleteSubjectTypeInput!): deleteSubjectTypePayload

    # Creates a Exam.
    createExam(input: createExamInput!): createExamPayload

    # Updates a Exam.
    updateExam(input: updateExamInput!): updateExamPayload

    # Deletes a Exam.
    deleteExam(input: deleteExamInput!): deleteExamPayload

    # Creates a User.
    createUser(input: createUserInput!): createUserPayload

    # Deletes a User.
    deleteUser(input: deleteUserInput!): deleteUserPayload

    # ChangePasswords a User.
    changePasswordUser(input: changePasswordUserInput!): changePasswordUserPayload

    # Updates a User.
    updateUser(input: updateUserInput!): updateUserPayload

    # MarkReadNotifications a User.
    markReadNotificationUser(
        input: markReadNotificationUserInput!
    ): markReadNotificationUserPayload

    # MarkReadAllNotificationss a User.
    markReadAllNotificationsUser(
        input: markReadAllNotificationsUserInput!
    ): markReadAllNotificationsUserPayload

    # Archives a User.
    archiveUser(input: archiveUserInput!): archiveUserPayload

    # Creates a WebPushSubscribe.
    createWebPushSubscribe(
        input: createWebPushSubscribeInput!
    ): createWebPushSubscribePayload

    # Updates a UserPrivateData.
    updateUserPrivateData(
        input: updateUserPrivateDataInput!
    ): updateUserPrivateDataPayload

    # Creates a Subject.
    createSubject(input: createSubjectInput!): createSubjectPayload

    # Updates a Subject.
    updateSubject(input: updateSubjectInput!): updateSubjectPayload

    # UpdateColors a Subject.
    updateColorSubject(input: updateColorSubjectInput!): updateColorSubjectPayload

    # Deletes a Subject.
    deleteSubject(input: deleteSubjectInput!): deleteSubjectPayload

    # Archives a Subject.
    archiveSubject(input: archiveSubjectInput!): archiveSubjectPayload

    # Creates a Point.
    createPoint(input: createPointInput!): createPointPayload

    # Edits a Point.
    editPoint(input: editPointInput!): editPointPayload

    # Deletes a Point.
    deletePoint(input: deletePointInput!): deletePointPayload

    # CreateOrUpdates a PointSystem.
    createOrUpdatePointSystem(
        input: createOrUpdatePointSystemInput!
    ): createOrUpdatePointSystemPayload

    # Creates a SchoolPeriod.
    createSchoolPeriod(input: createSchoolPeriodInput!): createSchoolPeriodPayload

    # Updates a SchoolPeriod.
    updateSchoolPeriod(input: updateSchoolPeriodInput!): updateSchoolPeriodPayload

    # Deletes a SchoolPeriod.
    deleteSchoolPeriod(input: deleteSchoolPeriodInput!): deleteSchoolPeriodPayload
}

#
input createGroupInput {
    section: String!
    clientMutationId: String
}

#
type createGroupPayload {
    group: Group
    clientMutationId: String
}

#
input updateGroupInput {
    id: ID!
    section: String
    clientMutationId: String
}

#
type updateGroupPayload {
    group: Group
    clientMutationId: String
}

#
input deleteGroupInput {
    id: ID!
    clientMutationId: String
}

#
type deleteGroupPayload {
    group: Group
    clientMutationId: String
}

#
input updateUsersGroupInput {
    id: ID!
    addUsers: [ID]
    deleteUsers: [ID]
    clientMutationId: String
}

#
type updateUsersGroupPayload {
    group: Group
    clientMutationId: String
}

#
input archiveGroupInput {
    id: ID!
    archive: Boolean!
    clientMutationId: String
}

#
type archiveGroupPayload {
    group: Group
    clientMutationId: String
}

#
input updatePercentToMarkConvertInput {
    id: ID!
    one: Int
    two: Int
    three: Int
    four: Int
    clientMutationId: String
}

#
type updatePercentToMarkConvertPayload {
    percentToMarkConvert: PercentToMarkConvert
    clientMutationId: String
}

#
input updateAclRoleInput {
    id: ID!

    # Example format: ROLE_ADMIN.
    # Must start with 'ROLE_' and name cant be longer than 20 letters.
    # (regex: ^ROLE_[A-Z]{1,20}$/m)
    name: String

    # Must be an array IRIs (acl_resources/<uuid>) of existing resources
    resources: [String]
    clientMutationId: String
}

#
type updateAclRolePayload {
    aclRole: AclRole
    clientMutationId: String
}

#
input createAclRoleInput {
    # Example format: ROLE_ADMIN.
    # Must start with 'ROLE_' and name cant be longer than 20 letters.
    # (regex: ^ROLE_[A-Z]{1,20}$/m)
    name: String!

    # Must be an array IRIs (acl_resources/<uuid>) of existing resources
    resources: [String]
    clientMutationId: String
}

#
type createAclRolePayload {
    aclRole: AclRole
    clientMutationId: String
}

#
input deleteAclRoleInput {
    id: ID!
    clientMutationId: String
}

#
type deleteAclRolePayload {
    aclRole: AclRole
    clientMutationId: String
}

#
input createClassGroupInput {
    year: Int!
    section: String!

    # Teacher needs to be user with resource GROUP_TEACHER
    teacher: String
    clientMutationId: String
}

#
type createClassGroupPayload {
    classGroup: ClassGroup
    clientMutationId: String
}

#
input updateClassGroupInput {
    id: ID!
    year: Int
    section: String

    # Teacher needs to be user with resource GROUP_TEACHER
    teacher: String
    clientMutationId: String
}

#
type updateClassGroupPayload {
    classGroup: ClassGroup
    clientMutationId: String
}

#
input updateUsersClassGroupInput {
    id: ID!
    addUsers: [ID]
    deleteUsers: [ID]
    clientMutationId: String
}

#
type updateUsersClassGroupPayload {
    classGroup: ClassGroup
    clientMutationId: String
}

#
input deleteClassGroupInput {
    id: ID!
    clientMutationId: String
}

#
type deleteClassGroupPayload {
    classGroup: ClassGroup
    clientMutationId: String
}

#
input archiveClassGroupInput {
    id: ID!
    archive: Boolean!
    clientMutationId: String
}

#
type archiveClassGroupPayload {
    classGroup: ClassGroup
    clientMutationId: String
}

#
input createSubjectTypeInput {
    name: String!
    clientMutationId: String
}

#
type createSubjectTypePayload {
    subjectType: SubjectType
    clientMutationId: String
}

#
input updateSubjectTypeInput {
    id: ID!
    name: String
    clientMutationId: String
}

#
type updateSubjectTypePayload {
    subjectType: SubjectType
    clientMutationId: String
}

#
input deleteSubjectTypeInput {
    id: ID!
    clientMutationId: String
}

#
type deleteSubjectTypePayload {
    subjectType: SubjectType
    clientMutationId: String
}

#
input createExamInput {
    name: String!
    subject: String
    writtenAt: String!
    clientMutationId: String
}

#
type createExamPayload {
    exam: Exam
    clientMutationId: String
}

#
input updateExamInput {
    id: ID!
    name: String
    subject: String
    writtenAt: String
    clientMutationId: String
}

#
type updateExamPayload {
    exam: Exam
    clientMutationId: String
}

#
input deleteExamInput {
    id: ID!
    clientMutationId: String
}

#
type deleteExamPayload {
    exam: Exam
    clientMutationId: String
}

#
input createUserInput {
    # email of user
    email: String!
    role: String!
    lastname: String!
    firstname: String!
    rawPassword: String
    clientMutationId: String
}

#
type createUserPayload {
    user: User
    clientMutationId: String
}

#
input deleteUserInput {
    id: ID!
    clientMutationId: String
}

#
type deleteUserPayload {
    user: User
    clientMutationId: String
}

#
input changePasswordUserInput {
    oldPassword: String!
    newPassword: String!
    clientMutationId: String
}

#
type changePasswordUserPayload {
    user: User
    clientMutationId: String
}

#
input updateUserInput {
    id: ID!

    # email of user
    email: String
    role: String
    lastname: String
    firstname: String
    rawPassword: String
    clientMutationId: String
}

#
type updateUserPayload {
    user: User
    clientMutationId: String
}

#
input markReadNotificationUserInput {
    id: ID!
    clientMutationId: String
}

#
type markReadNotificationUserPayload {
    user: User
    clientMutationId: String
}

#
input markReadAllNotificationsUserInput {
    clientMutationId: String
}

#
type markReadAllNotificationsUserPayload {
    user: User
    clientMutationId: String
}

#
input archiveUserInput {
    id: ID!
    archive: Boolean!
    clientMutationId: String
}

#
type archiveUserPayload {
    user: User
    clientMutationId: String
}

#
input createWebPushSubscribeInput {
    user: String
    data: Iterable!
    clientMutationId: String
}

#
type createWebPushSubscribePayload {
    webPushSubscribe: WebPushSubscribe
    clientMutationId: String
}

#
type WebPushSubscribe implements Node {
    id: ID!
    _id: String!
}

#
input updateUserPrivateDataInput {
    id: ID!
    tourHomepage: Boolean
    tourClassGroup: Boolean
    tourGroup: Boolean
    tourCreateUsers: Boolean
    darkMode: Boolean
    newMarkNotificationEmail: Boolean
    clientMutationId: String
}

#
type updateUserPrivateDataPayload {
    userPrivateData: UserPrivateData
    clientMutationId: String
}

#
input createSubjectInput {
    subjectType: String
    teacher: String!
    iGroupIri: String!
    clientMutationId: String
}

#
type createSubjectPayload {
    subject: Subject
    clientMutationId: String
}

#
input updateSubjectInput {
    id: ID!
    subjectType: String
    teacher: String
    iGroupIri: String
    clientMutationId: String
}

#
type updateSubjectPayload {
    subject: Subject
    clientMutationId: String
}

#
input updateColorSubjectInput {
    id: ID!
    teacherCardColor: String
    clientMutationId: String
}

#
type updateColorSubjectPayload {
    subject: Subject
    clientMutationId: String
}

#
input deleteSubjectInput {
    id: ID!
    clientMutationId: String
}

#
type deleteSubjectPayload {
    subject: Subject
    clientMutationId: String
}

#
input archiveSubjectInput {
    id: ID!
    archive: Boolean!
    clientMutationId: String
}

#
type archiveSubjectPayload {
    subject: Subject
    clientMutationId: String
}

#
input createPointInput {
    user: String!
    points: Int!
    examWritten: Boolean!
    clientMutationId: String
}

#
type createPointPayload {
    point: Point
    clientMutationId: String
}

#
input editPointInput {
    id: ID!
    user: String!
    points: Int!
    examWritten: Boolean!
    clientMutationId: String
}

#
type editPointPayload {
    point: Point
    clientMutationId: String
}

#
input deletePointInput {
    id: ID!
    clientMutationId: String
}

#
type deletePointPayload {
    point: Point
    clientMutationId: String
}

#
input createOrUpdatePointSystemInput {
    exam: ID!
    maxPoints: Int!
    points: [createPointInput!]
    clientMutationId: String
}

#
type createOrUpdatePointSystemPayload {
    pointSystem: PointSystem
    clientMutationId: String
}

#
input createSchoolPeriodInput {
    # quarter of year from 1 to 4
    quarter: Int!

    # from when quarter is started
    from: String!

    # when quarter ends
    to: String!

    # 1st year of school (ex. 2020/21 so school year will be 2020)
    schoolYear: Int!
    clientMutationId: String
}

#
type createSchoolPeriodPayload {
    schoolPeriod: SchoolPeriod
    clientMutationId: String
}

#
input updateSchoolPeriodInput {
    id: ID!

    # quarter of year from 1 to 4
    quarter: Int

    # from when quarter is started
    from: String

    # when quarter ends
    to: String

    # 1st year of school (ex. 2020/21 so school year will be 2020)
    schoolYear: Int
    clientMutationId: String
}

#
type updateSchoolPeriodPayload {
    schoolPeriod: SchoolPeriod
    clientMutationId: String
}

#
input deleteSchoolPeriodInput {
    id: ID!
    clientMutationId: String
}

#
type deleteSchoolPeriodPayload {
    schoolPeriod: SchoolPeriod
    clientMutationId: String
}

type SymfonyUserImpl implements SymfonyUserInterface {
    #
    #
    roles: [String!]!

    # Returns the username used to authenticate the user.
    userName: String!
}
