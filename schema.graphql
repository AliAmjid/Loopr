# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type Mutation {
    "Creates a User."
    createUser(input: createUserInput!): createUserPayload
    "Deletes a User."
    deleteUser(input: deleteUserInput!): deleteUserPayload
    "Updates a User."
    updateUser(input: updateUserInput!): updateUserPayload
}

type Query {
    getToken(email: String!, password: String!): Token
    node(id: ID!): Node
    user(id: ID!): User
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): UserConnection
}

type Token implements Node {
    id: ID!
    token: String!
    user: User!
}

type User implements Node {
    _id: String!
    email: String!
    id: ID!
    name: String!
    "The hashed password"
    password: String!
    roles: Iterable!
    "A visual identifier that represents this user."
    username: String!
}

"Connection for User."
type UserConnection {
    edges: [UserEdge]
    pageInfo: UserPageInfo!
    totalCount: Int!
}

"Edge of User."
type UserEdge {
    cursor: String!
    node: User
}

"Information about the current page."
type UserPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type createUserPayload {
    clientMutationId: String
    user: User
}

type deleteUserPayload {
    clientMutationId: String
    user: User
}

type updateUserPayload {
    clientMutationId: String
    user: User
}

input createUserInput {
    clientMutationId: String
    email: String!
    name: String!
    "The hashed password"
    password: String!
    roles: Iterable!
}

input deleteUserInput {
    clientMutationId: String
    id: ID!
}

input updateUserInput {
    clientMutationId: String
    email: String
    id: ID!
    name: String
    "The hashed password"
    password: String
    roles: Iterable
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
