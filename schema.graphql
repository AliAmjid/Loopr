# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type AclResource implements Node {
    _id: String!
    dependsOn: [AclResource]
    id: ID!
    name: String!
}

type AclResourceCollection implements Node {
    _id: String!
    dependsOn: [AclResourceCollection]
    id: ID!
    name: String!
}

type AclResourceItem implements Node {
    _id: String!
    dependsOn: [AclResourceItem]
    id: ID!
    name: String!
}

type AclRole implements Node {
    _id: String!
    id: ID!
    name: String!
    resource: [Iterable]
    resources: [AclResource]
}

type AclRoleCollection implements Node {
    _id: String!
    id: ID!
    name: String!
    resource: [Iterable]
    resources: [AclResourceCollection]
}

type AclRoleItem implements Node {
    _id: String!
    id: ID!
    name: String!
    resource: [Iterable]
    resources: [AclResourceItem]
}

type Mutation {
    "Creates a AclRole."
    createAclRole(input: createAclRoleInput!): createAclRolePayload
    "Tests a User."
    testUser(input: testUserInput!): testUserPayload
    "Updates a AclRole."
    updateAclRole(input: updateAclRoleInput!): updateAclRolePayload
}

type Query {
    aclResources: [AclResourceCollection]
    aclRole(id: ID!): AclRoleItem
    aclRoles: [AclRoleCollection]
    getToken(password: String!, username: String!): Token
    meUser: User
    node(id: ID!): Node
}

type Token implements Node {
    id: ID!
    "Use token in header like this: 'Authorization: Bearer {token}'"
    token: String!
    user: User!
}

type User implements Node {
    _id: String!
    id: ID!
    name: String!
    role: AclRole!
    "email of user"
    username: String!
}

type createAclRolePayload {
    aclRole: AclRoleItem
    clientMutationId: String
}

type testUserPayload {
    clientMutationId: String
    user: User
}

type updateAclRolePayload {
    aclRole: AclRoleItem
    clientMutationId: String
}

input createAclRoleInput {
    clientMutationId: String
    name: String!
    resources: [String]
}

input testUserInput {
    clientMutationId: String
    id: ID!
    name: String!
    "The hashed password"
    password: String!
    role: String!
    "email of user"
    username: String!
}

input updateAclRoleInput {
    clientMutationId: String
    id: ID!
    name: String
    resource: [Iterable]
    resources: [String]
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
