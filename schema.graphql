# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type AclResource implements Node {
    _id: String!
    dependsOn: [AclResource]
    id: ID!
    name: String!
}

type AclResourceCollection implements Node {
    _id: String!
    dependsOn: [AclResourceCollection]
    id: ID!
    name: String!
}

type AclResourceItem implements Node {
    _id: String!
    dependsOn: [AclResourceItem]
    id: ID!
    name: String!
}

type AclRole implements Node {
    _id: String!
    id: ID!
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String!
    resource: [AclResource]
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [AclResource]
}

type AclRoleCollection implements Node {
    _id: String!
    id: ID!
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String!
    resource: [AclResourceCollection]
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [AclResourceCollection]
}

type AclRoleItem implements Node {
    _id: String!
    id: ID!
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String!
    resource: [AclResourceItem]
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [AclResourceItem]
}

type ClassGroup implements Node {
    createdBy: UserItem
    id: ID!
    section: String!
    "Teacher needs to be user with resource GROUP_TEACHER"
    teacher: UserItem
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        email: String,
        email_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        firstname: String,
        firstname_list: [String],
        id: String,
        id_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        lastname: String,
        lastname_list: [String]
    ): UserItemConnection
    year: Int!
}

"Connection for ClassGroup."
type ClassGroupConnection {
    edges: [ClassGroupEdge]
    pageInfo: ClassGroupPageInfo!
    totalCount: Int!
}

"Edge of ClassGroup."
type ClassGroupEdge {
    cursor: String!
    node: ClassGroup
}

"Information about the current page."
type ClassGroupPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Group implements Node {
    createdAt: String!
    createdBy: UserItem
    id: ID!
    section: String!
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        email: String,
        email_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        firstname: String,
        firstname_list: [String],
        id: String,
        id_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        lastname: String,
        lastname_list: [String]
    ): UserItemConnection
    year: Int!
}

"Connection for Group."
type GroupConnection {
    edges: [GroupEdge]
    pageInfo: GroupPageInfo!
    totalCount: Int!
}

"Edge of Group."
type GroupEdge {
    cursor: String!
    node: Group
}

"Information about the current page."
type GroupPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Mutation {
    "ChangePasswords a User."
    changePasswordUser(input: changePasswordUserInput!): changePasswordUserPayload
    "Creates a AclRole."
    createAclRole(input: createAclRoleInput!): createAclRolePayload
    "Creates a ClassGroup."
    createClassGroup(input: createClassGroupInput!): createClassGroupPayload
    "Creates a Group."
    createGroup(input: createGroupInput!): createGroupPayload
    "Creates a Subject."
    createSubject(input: createSubjectInput!): createSubjectPayload
    "Creates a SubjectHasGroup."
    createSubjectHasGroup(input: createSubjectHasGroupInput!): createSubjectHasGroupPayload
    "Creates a User."
    createUser(input: createUserInput!): createUserPayload
    "Updates a AclRole."
    updateAclRole(input: updateAclRoleInput!): updateAclRolePayload
    "Updates a ClassGroup."
    updateClassGroup(input: updateClassGroupInput!): updateClassGroupPayload
    "Updates a Group."
    updateGroup(input: updateGroupInput!): updateGroupPayload
    "Updates a Subject."
    updateSubject(input: updateSubjectInput!): updateSubjectPayload
    "Updates a User."
    updateUser(input: updateUserInput!): updateUserPayload
}

type Query {
    aclResources: [AclResourceCollection]
    aclRole(id: ID!): AclRoleItem
    aclRoles: [AclRoleCollection]
    classGroup(id: ID!): ClassGroup
    classGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ClassGroupConnection
    getToken(email: String!, password: String!): Token
    group(id: ID!): Group
    groups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        id: String,
        id_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        section: String
    ): GroupConnection
    meUser: User
    node(id: ID!): Node
    subject(id: ID!): Subject
    subjectHasGroup(id: ID!): SubjectHasGroup
    subjectHasGroups(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): SubjectHasGroupConnection
    subjects(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): SubjectConnection
    user(id: ID!): UserItem
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        email: String,
        email_list: [String],
        "Returns the first n elements from the list."
        first: Int,
        firstname: String,
        firstname_list: [String],
        id: String,
        id_list: [String],
        "Returns the last n elements from the list."
        last: Int,
        lastname: String,
        lastname_list: [String]
    ): UserCollectionConnection
}

type Subject implements Node {
    id: ID!
    name: String!
}

"Connection for Subject."
type SubjectConnection {
    edges: [SubjectEdge]
    pageInfo: SubjectPageInfo!
    totalCount: Int!
}

"Edge of Subject."
type SubjectEdge {
    cursor: String!
    node: Subject
}

type SubjectHasGroup implements Node {
    classGroup: ClassGroup
    group: Group
    id: ID!
    subject: Subject
    teacher: UserItem
}

"Connection for SubjectHasGroup."
type SubjectHasGroupConnection {
    edges: [SubjectHasGroupEdge]
    pageInfo: SubjectHasGroupPageInfo!
    totalCount: Int!
}

"Edge of SubjectHasGroup."
type SubjectHasGroupEdge {
    cursor: String!
    node: SubjectHasGroup
}

"Information about the current page."
type SubjectHasGroupPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

"Information about the current page."
type SubjectPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Token implements Node {
    id: ID!
    "Use token in header like this: 'Authorization: Bearer {token}'"
    token: String!
    user: User!
}

type User implements Node {
    _id: String!
    classGroup: ClassGroup
    createdAt: String!
    "email of user"
    email: String!
    firstname: String!
    id: ID!
    lastname: String!
    role: AclRole!
}

type UserCollection implements Node {
    _id: String!
    classGroup: ClassGroup
    createdAt: String!
    "email of user"
    email: String!
    firstname: String!
    id: ID!
    lastname: String!
    role: AclRoleCollection!
}

"Connection for UserCollection."
type UserCollectionConnection {
    edges: [UserCollectionEdge]
    pageInfo: UserCollectionPageInfo!
    totalCount: Int!
}

"Edge of UserCollection."
type UserCollectionEdge {
    cursor: String!
    node: UserCollection
}

"Information about the current page."
type UserCollectionPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type UserItem implements Node {
    _id: String!
    classGroup: ClassGroup
    createdAt: String!
    "email of user"
    email: String!
    firstname: String!
    id: ID!
    lastname: String!
    name: String @deprecated(reason : "Replaced with firstname and lastname")
    "The hashed password"
    password: String!
    role: AclRoleItem!
    roles: Iterable!
    username: String! @deprecated(reason : "use email instead")
}

"Connection for UserItem."
type UserItemConnection {
    edges: [UserItemEdge]
    pageInfo: UserItemPageInfo!
    totalCount: Int!
}

"Edge of UserItem."
type UserItemEdge {
    cursor: String!
    node: UserItem
}

"Information about the current page."
type UserItemPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type changePasswordUserPayload {
    clientMutationId: String
    user: UserItem
}

type createAclResourceNestedPayload implements Node {
    _id: String!
    dependsOn: [createAclResourceNestedPayload]
    id: ID!
    name: String!
}

type createAclRoleNestedPayload implements Node {
    _id: String!
    id: ID!
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String!
    resource: [createAclResourceNestedPayload]
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [createAclResourceNestedPayload]
}

type createAclRolePayload {
    aclRole: AclRoleItem
    clientMutationId: String
}

type createClassGroupNestedPayload implements Node {
    _id: String!
    createdBy: createUserNestedPayload
    id: ID!
    section: String!
    "Teacher needs to be user with resource GROUP_TEACHER"
    teacher: createUserNestedPayload
    users: createUserNestedPayloadConnection
    year: Int!
}

type createClassGroupPayload {
    classGroup: createClassGroupPayloadData
    clientMutationId: String
}

type createClassGroupPayloadData implements Node {
    _id: String!
    createdBy: createUserNestedPayload
    id: ID!
    section: String!
    "Teacher needs to be user with resource GROUP_TEACHER"
    teacher: createUserNestedPayload
    users: createUserNestedPayloadConnection
    year: Int!
}

type createGroupNestedPayload implements Node {
    _id: String!
    createdAt: String!
    createdBy: createUserNestedPayload
    id: ID!
    section: String!
    users: createUserNestedPayloadConnection
    year: Int!
}

type createGroupPayload {
    clientMutationId: String
    group: createGroupPayloadData
}

type createGroupPayloadData implements Node {
    _id: String!
    createdAt: String!
    createdBy: createUserNestedPayload
    id: ID!
    section: String!
    users: createUserNestedPayloadConnection
    year: Int!
}

type createSubjectHasGroupPayload {
    clientMutationId: String
    subjectHasGroup: createSubjectHasGroupPayloadData
}

type createSubjectHasGroupPayloadData implements Node {
    classGroup: createClassGroupNestedPayload
    group: createGroupNestedPayload
    id: ID!
    subject: createSubjectNestedPayload
    teacher: createUserNestedPayload
}

type createSubjectNestedPayload implements Node {
    id: ID!
    name: String!
}

type createSubjectPayload {
    clientMutationId: String
    subject: createSubjectPayloadData
}

type createSubjectPayloadData implements Node {
    id: ID!
    name: String!
}

type createUserNestedPayload implements Node {
    _id: String!
    classGroup: createClassGroupNestedPayload
    createdAt: String!
    "email of user"
    email: String!
    firstname: String!
    id: ID!
    lastname: String!
    role: createAclRoleNestedPayload!
}

"Connection for createUserNestedPayload."
type createUserNestedPayloadConnection {
    edges: [createUserNestedPayloadEdge]
    pageInfo: createUserNestedPayloadPageInfo!
    totalCount: Int!
}

"Edge of createUserNestedPayload."
type createUserNestedPayloadEdge {
    cursor: String!
    node: createUserNestedPayload
}

"Information about the current page."
type createUserNestedPayloadPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type createUserPayload {
    clientMutationId: String
    user: createUserPayloadData
}

type createUserPayloadData implements Node {
    _id: String!
    classGroup: createClassGroupNestedPayload
    createdAt: String!
    "email of user"
    email: String!
    firstname: String!
    id: ID!
    lastname: String!
    role: createAclRoleNestedPayload!
}

type updateAclResourceNestedPayload implements Node {
    _id: String
    dependsOn: [updateAclResourceNestedPayload]
    id: ID!
    name: String
}

type updateAclRoleNestedPayload implements Node {
    _id: String
    id: ID!
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String
    resource: [updateAclResourceNestedPayload]
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [updateAclResourceNestedPayload]
}

type updateAclRolePayload {
    aclRole: AclRoleItem
    clientMutationId: String
}

type updateClassGroupNestedPayload implements Node {
    _id: String
    createdBy: updateUserNestedPayload
    id: ID!
    section: String
    "Teacher needs to be user with resource GROUP_TEACHER"
    teacher: updateUserNestedPayload
    users: updateUserNestedPayloadConnection
    year: Int
}

type updateClassGroupPayload {
    classGroup: updateClassGroupPayloadData
    clientMutationId: String
}

type updateClassGroupPayloadData implements Node {
    _id: String
    createdBy: updateUserNestedPayload
    id: ID!
    section: String
    "Teacher needs to be user with resource GROUP_TEACHER"
    teacher: updateUserNestedPayload
    users: updateUserNestedPayloadConnection
    year: Int
}

type updateGroupPayload {
    clientMutationId: String
    group: updateGroupPayloadData
}

type updateGroupPayloadData implements Node {
    _id: String
    createdAt: String
    createdBy: updateUserNestedPayload
    id: ID!
    section: String
    users: updateUserNestedPayloadConnection
    year: Int
}

type updateSubjectPayload {
    clientMutationId: String
    subject: updateSubjectPayloadData
}

type updateSubjectPayloadData implements Node {
    id: ID!
    name: String
}

type updateUserNestedPayload implements Node {
    _id: String
    classGroup: updateClassGroupNestedPayload
    createdAt: String
    "email of user"
    email: String
    firstname: String
    id: ID!
    lastname: String
    role: updateAclRoleNestedPayload
}

"Connection for updateUserNestedPayload."
type updateUserNestedPayloadConnection {
    edges: [updateUserNestedPayloadEdge]
    pageInfo: updateUserNestedPayloadPageInfo!
    totalCount: Int!
}

"Edge of updateUserNestedPayload."
type updateUserNestedPayloadEdge {
    cursor: String!
    node: updateUserNestedPayload
}

"Information about the current page."
type updateUserNestedPayloadPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type updateUserPayload {
    clientMutationId: String
    user: updateUserPayloadData
}

type updateUserPayloadData implements Node {
    _id: String
    classGroup: updateClassGroupNestedPayload
    createdAt: String
    "email of user"
    email: String
    firstname: String
    id: ID!
    lastname: String
    role: updateAclRoleNestedPayload
}

input changePasswordUserInput {
    clientMutationId: String
    newPassword: String!
    oldPassword: String!
}

input createAclRoleInput {
    clientMutationId: String
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String!
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [String]
}

input createClassGroupInput {
    clientMutationId: String
    section: String!
    users: [String]
    year: Int!
}

input createGroupInput {
    clientMutationId: String
    section: String!
    users: [String]
    year: Int!
}

input createSubjectHasGroupInput {
    classGroup: String
    clientMutationId: String
    group: String
    subject: String
    teacher: String
}

input createSubjectInput {
    clientMutationId: String
    name: String!
}

input createUserInput {
    classGroup: String
    clientMutationId: String
    "email of user"
    email: String!
    firstname: String!
    lastname: String!
    role: String!
}

input updateAclResourceInput {
    _id: String
    clientMutationId: String
    dependsOn: [String]
    id: ID!
    name: String
}

input updateAclRoleInput {
    clientMutationId: String
    id: ID!
    """

    Example format: ROLE_ADMIN.
    Must start with 'ROLE_' and name cant be longer than 20 letters.
    (regex: ^ROLE_[A-Z]{1,20}$/m)
    """
    name: String
    resource: [updateAclResourceInput!]
    "Must be an array IRIs (acl_resources/<uuid>) of existing resources"
    resources: [String]
}

input updateClassGroupInput {
    clientMutationId: String
    id: ID!
    section: String
    users: [String]
    year: Int
}

input updateGroupInput {
    clientMutationId: String
    id: ID!
    section: String
    users: [String]
    year: Int
}

input updateSubjectInput {
    clientMutationId: String
    id: ID!
    name: String
}

input updateUserInput {
    classGroup: String
    clientMutationId: String
    "email of user"
    email: String
    firstname: String
    id: ID!
    lastname: String
    role: String
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
